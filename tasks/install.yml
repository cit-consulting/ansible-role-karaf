---

# Install ESB

- name: "Dowload Karaf distribution"
  local_action:  get_url url={{ karaf_downoal_url }} dest=tmp/{{ karaf_distr_name }}.{{ karaf_archive_type }}
  when: karaf_downoal_url is defined
  run_once: true
  changed_when: false
  sudo: no
  tags:
    - install

- name: "Check karaf install dyrectory is not empty"
  stat:
    path: "{{ karaf_home }}"
  register: karaf_new_install_dir_created
  tags:
    - install

- name: "Create installation directory"
  file:
    path: "{{ karaf_install_dir }}/{{ karaf_distr_name }}"
    state: directory
  sudo: yes
  when: not karaf_new_install_dir_created.stat.exists

- name: "Stop Karaf service if running"
  service:
    name: "{{ karaf_service_link_name }}"
    state: stopped
  ignore_errors: True
  when: not karaf_new_install_dir_created.stat.exists
  sudo: yes
  tags:
   - install

- name: "Create Karaf system user"
  user:
    name: "{{ karaf_os_user_name }}"
    home: "{{ karaf_install_dir }}/{{ karaf_distr_name }}"
    system: yes
    state: present
  sudo: yes
  when: not karaf_new_install_dir_created.stat.exists
  tags:
    - install

- name: "Unarchived Karaf distribution"
  unarchive:
    src: "tmp/{{ karaf_distr_name }}.{{ karaf_archive_type }}"
    dest: "{{ karaf_install_dir }}"
  sudo: yes
  when: not karaf_new_install_dir_created.stat.exists
  tags:
    - install

- name: "Create directory karaf-extended-logging/1.0.0/"
  file:
    path: "{{ karaf_home }}/system/ru/citc/karaf/karaf-extended-logging/1.0.0"
    state: directory
  when: karaf_use_extended_logging
  tags:
    - install

- name: "Upload Karaf extended logging module"
  copy:
    src: "karaf-extended-logging-1.0.0.jar"
    dest: "{{ karaf_home }}/system/ru/citc/karaf/karaf-extended-logging/1.0.0/karaf-extended-logging-1.0.0.jar"
  when: karaf_use_extended_logging
  tags:
    - install

- name: "Configure extended logging in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: karaf_logging_properties
  when: karaf_use_extended_logging
  tags:
    - install

- name: "Create directory gelfj/1.1.14/"
  file:
    path: "{{ karaf_home }}/system/org/graylog2/gelfj/1.1.14"
    state: directory
  when: karaf_log_gelf_enabled
  tags:
    - install

- name: "Upload Karaf gelfj logging module"
  copy:
    src: "gelfj-1.1.14.jar"
    dest: "{{ karaf_home }}/system/org/graylog2/gelfj/1.1.14/gelfj-1.1.14.jar"
  when: karaf_log_gelf_enabled
  tags:
    - install

- name: "Configure extended logging in startup.properties"
  lineinfile:
    dest: "{{ karaf_home }}/etc/startup.properties"
    state: present
    regexp: '{{ item.1 | replace("mvn\:", "") | regex_replace("/[0-9.]+\w+?\Z", "") }}.*$'
    line: '{{ item.1 }} = 7'
  with_indexed_items:
    - mvn\:ru.citc.karaf/karaf-extended-logging/1.0.0
    - mvn\:org.graylog2/gelfj/1.1.14
  when: (karaf_use_extended_logging and item.0 == 0) or (karaf_log_gelf_enabled and item.0 == 1)
  tags:
    - install

- name: "Configure gelfj logging in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: karaf_log_gelf_properties
  when: karaf_log_gelf_enabled and karaf_log_gelf_host != ''
  tags:
    - install

- name: "Anjust filesystem access mode on Karaf dir"
  shell: chown -R {{ karaf_os_user_name }}:{{ karaf_os_user_name }} {{ karaf_install_dir }}/{{ karaf_distr_name }}
  when: not karaf_new_install_dir_created.stat.exists
  sudo: yes
  tags:
    - install

- include: "configure-karaf.yml"
  when: not karaf_new_install_dir_created.stat.exists

# Install service wrapper
- name: "Check wrapper.conf availability"
  stat:
    path: "{{karaf_home }}/etc/{{ karaf_service_name }}-wrapper.conf"
  register: karaf_wrapper_conf_path_validation
  tags:
    - install

- name: "Set environment for karaf"
  lineinfile:
    dest: "{{karaf_home }}/bin/setenv"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: karaf_environment_default_options
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
    - config

- name: "Stop Karaf before first run"
  shell: '{{ karaf_home }}/bin/stop'
  ignore_errors: True
  when: not karaf_wrapper_conf_path_validation.stat.exists
  sudo: yes
  sudo_user: "{{ karaf_os_user_name }}"
#  environment:
#    JAVA_HOME: "{{ karaf_java_home }}"
  tags:
   - install

- name: "First start Karaf"
  shell: 'su - {{ karaf_os_user_name }} -c {{karaf_home }}/bin/start'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  sudo: yes
  tags:
   - install

- name: "Wait for Karaf to start"
  wait_for:
    port: "{{ karaf_ssh_port }}"
    timeout: 30
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
    - install

- name: "Pause for Karaf to start "
  pause:
    seconds: "{{ karaf_time_pause_to_ferst_start }}"
  when: not karaf_wrapper_conf_path_validation.stat.exists and karaf_pause_to_ferst_start == "yes"
  tags:
    - install

- name: "Generate service script"
  shell: "{{ item }}"
  with_items:
    - '{{ karaf_connect_to_local_Karaf_instance }} "feature:install wrapper"'
    - '{{ karaf_connect_to_local_Karaf_instance }} "wrapper:install -n {{ karaf_service_name }} -d {{ karaf_service_name }} -D "{{ karaf_service_name }}""'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  sudo: yes
  sudo_user: "{{ karaf_os_user_name }}"
#  environment:
#    JAVA_HOME: "{{ karaf_java_home }}"
  tags:
   - install

- name: "Stop Karaf"
  shell: '{{karaf_home }}/bin/stop'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  sudo: yes
  sudo_user: "{{ karaf_os_user_name }}"
#  environment:
#    JAVA_HOME: "{{ karaf_java_home }}"
  tags:
   - install

- name: "Configure service user"
  lineinfile:
    dest: "{{ karaf_home }}/bin/{{ karaf_service_link_name }}"
    state: present
    regexp: "^#?RUN_AS_USER.*$"
    line: "RUN_AS_USER={{ karaf_os_user_name }}"
  sudo: yes
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
    - install

- name: "Create service simlink"
  file:
    src: "{{karaf_home }}/bin/{{ karaf_service_link_name }}"
    dest: "/etc/init.d/{{ karaf_service_link_name }}"
    state: link
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
   - install

- include: "configure-wrapper.yml"
  when: not karaf_wrapper_conf_path_validation.stat.exists

- name: "Register and start service"
  service:
    name: "{{ karaf_service_link_name }}"
    enabled: yes
    state: started
  when: not karaf_wrapper_conf_path_validation.stat.exists
  sudo: yes
  tags:
    - install
