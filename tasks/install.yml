---

# Install Karaf

- name: "Download Karaf distribution"
  local_action:  get_url url={{ karaf_download_url }} dest=tmp/{{ karaf_distr_name }}.{{ karaf_archive_type }}
  when: karaf_download_url is defined
  run_once: true
  changed_when: false
  become: no
  tags:
    - install

- name: "Check karaf install dyrectory is not empty"
  stat:
    path: "{{ karaf_home }}"
  register: karaf_new_install_dir_created
  tags:
    - install

- name: "Get Karaf user home"
  shell: 'getent passwd "{{ karaf_os_user_name }}" | cut -d: -f6'
  changed_when: false
  register: karaf_os_user_home
  become: yes
  tags:
    - install

- name: "Check Karaf user home"
  set_fact:
    karaf_os_user_home_changed: "{{ karaf_os_user_home.stdout != karaf_install_dir + '/' + karaf_distr_name }}"

- name: "Create installation directory"
  file:
    path: "{{ karaf_install_dir }}/{{ karaf_distr_name }}"
    state: directory
  become: yes
  when: not karaf_new_install_dir_created.stat.exists

- name: "Stop Karaf service if running"
  service:
    name: "{{ karaf_service_name }}"
    state: stopped
  ignore_errors: True
  when: not karaf_new_install_dir_created.stat.exists or karaf_os_user_home_changed | bool
  become: yes
  tags:
   - install

- name: "Create Karaf system user"
  user:
    name: "{{ karaf_os_user_name }}"
    home: "{{ karaf_install_dir }}/{{ karaf_distr_name }}"
    system: yes
    state: present
  become: yes
  when: not karaf_new_install_dir_created.stat.exists or karaf_os_user_home_changed | bool
  tags:
    - install

- name: "Unarchived Karaf distribution"
  unarchive:
    src: "tmp/{{ karaf_distr_name }}.{{ karaf_archive_type }}"
    dest: "{{ karaf_install_dir }}"
  become: yes
  when: not karaf_new_install_dir_created.stat.exists
  tags:
    - install

- name: "Upload Karaf client patch"
  copy:
    src: "org.apache.karaf.client-4.2.1.jar"
    dest: "{{ karaf_home }}/system/org/apache/karaf/org.apache.karaf.client/{{ karaf_distr_version }}/org.apache.karaf.client-{{ karaf_distr_version }}.jar"
  when: not karaf_new_install_dir_created.stat.exists and karaf_distr_version is version_compare("4.2.1", ">")
  tags:
    - install

- name: "Anjust filesystem access mode on Karaf dir"
  become: yes
  file:
    path: '{{ karaf_install_dir }}/{{ karaf_distr_name }}'
    owner: '{{ karaf_os_user_name }}'
    group: '{{ karaf_os_user_name }}'
    recurse: 'yes'
    state: 'directory'
  changed_when: false

# Install service wrapper
- name: "Check wrapper.conf availability"
  stat:
    path: "{{karaf_home }}/etc/{{ karaf_service_name }}-wrapper.conf"
  register: karaf_wrapper_conf_path_validation
  tags:
    - install
    - wrapper

- name: "Set environment for karaf"
  lineinfile:
    dest: "{{karaf_home }}/bin/setenv"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ karaf_environment_default_options }}"
  tags:
    - install
    - config

- name: "Apply sshPort on custom value"
  lineinfile:
    dest: "{{ karaf_home }}/etc/org.apache.karaf.shell.cfg"
    state: present
    regexp: "^#?sshPort.*$"
    line: "sshPort = {{ karaf_ssh_port }}"
  when: karaf_ssh_port != 8101
  tags:
    - install

- name: "Stop Karaf before first run"
  shell: '{{ karaf_home }}/bin/stop'
  ignore_errors: True
  when: not karaf_wrapper_conf_path_validation.stat.exists
  become: yes
  become_user: "{{ karaf_os_user_name }}"
  tags:
   - install

- name: "First start Karaf"
  shell: 'su - {{ karaf_os_user_name }} -c {{karaf_home }}/bin/start'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  become: yes
  tags:
   - install
   - wrapper

- name: "Wait for Karaf to start"
  wait_for:
    port: "{{ karaf_ssh_port }}"
    timeout: "{{ karaf_timeout_to_wait_first_start }}"
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
    - install
    - wrapper

- name: "Pause for Karaf to start "
  pause:
    seconds: "{{ karaf_time_pause_to_ferst_start }}"
  when: not karaf_wrapper_conf_path_validation.stat.exists and karaf_pause_to_ferst_start == "yes"
  tags:
    - install
    - wrapper

- name: "Generate service script"
  shell: "{{ item }}"
  with_items:
    - '{{ karaf_connect_to_local_Karaf_instance }} "feature:install wrapper"'
    - '{{ karaf_connect_to_local_Karaf_instance }} "wrapper:install -n {{ karaf_service_name }} -d {{ karaf_service_name }} -D "{{ karaf_service_name }}""'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  become: yes
  become_user: "{{ karaf_os_user_name }}"
  tags:
   - install
   - wrapper

- name: "Clean cache on wrapper installation"
  become: yes
  file:
    path: '{{karaf_home }}/data/clean_cache'
    state: touch
    mode: 0755
  when: not karaf_wrapper_conf_path_validation.stat.exists
  tags:
    - install
    - wrapper

- name: "Patch wrapper systemd unit"
  lineinfile:
    dest: "{{ karaf_home }}/bin/{{ karaf_service_name }}.service"
    state: present
    regexp: "Alias\\s*="
    line: "Alias={{ karaf_service_name }}.service"
  when: ansible_service_mgr is defined and ansible_service_mgr == 'systemd'
  tags:
    - install
    - service
    - wrapper

- name: "Stop Karaf"
  shell: '{{karaf_home }}/bin/stop'
  when: not karaf_wrapper_conf_path_validation.stat.exists
  become: yes
  become_user: "{{ karaf_os_user_name }}"
  tags:
   - install
   - wrapper
