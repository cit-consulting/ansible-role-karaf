---

- name: "Install features: Set karaf feature values"
  set_fact:
    karaf_features: |
          {%- set items = [] -%}
          {%- for elem in (hostvars[inventory_hostname] | select('match', 'karaf_features.*') | map('extract', hostvars[inventory_hostname]) | list) -%}
              {{ items.extend(elem) }}
          {%- endfor -%}
          {{ items | list }}
  tags:
    - install-features

- name: "Install features: Checking karaf feature values for errors"
  set_fact:
    karaf_features_errors: |
          {%- for feature in karaf_features -%}
            {%- if (karaf_features | selectattr('name', 'defined') | selectattr('name', 'match', feature.name) | list | length > 1 and feature.name != "") or (karaf_features | selectattr('repo', 'defined') | selectattr('repo', 'match', feature.repo | d()) | list | length > 1 and feature.name == "") -%}
              Error {{ feature }}
            {%- endif -%}
          {%- endfor -%}
  failed_when: karaf_features_errors is search("Error")
  tags:
    - install-features

- name: "Install features: Find the full features install list with versions"
  set_fact:
    full_features_install_list_with_versions: '{% for features in karaf_features %}{% if features.name != "" %}{{ features.name }}{{ "/" ~ features.version if features.version is defined  and features.version != "" else "" }} {% endif %}{% endfor %}'
  tags:
    - install-features

- name: "Install features: Find the full features install list without versions"
  set_fact:
    full_features_install_list_without_versions: '{{ full_features_install_list_with_versions | regex_replace("(/\S+)?\s", "|") }}'
  tags:
    - install-features

- name: "Install features: Preparation the full features install list for grep"
  set_fact:
    full_features_install_list_for_grep: "feature:list -i --no-format | grep --color never '^({{ full_features_install_list_without_versions }})\\s'"
  tags:
    - install-features

- name: "Install features: Start Karaf"
  become: yes
  service:
    name: '{{ karaf_service_name }}'
    state: started
  tags:
    - install-features

- name: "Install features: Wait for Karaf ssh port"
  wait_for: "port={{ karaf_ssh_port }} timeout=30"
  tags:
    - install-features

- name: "Install features: Apply features configs"
  become: yes
  template:
    src: '{{ karaf_path_features_configs }}{{ "/" ~ karaf_environment_configs if karaf_environment_configs is defined else "" }}/{{ item.1 | regex_replace(".*/", "") }}'
    dest: '{{ karaf_home }}/{{ item.1 | regex_replace(".j2", "") }}'
    owner: "{{ karaf_os_user_name }}"
    group: "{{ karaf_os_user_name }}"
    mode: 0644
    backup: yes
  with_subelements:
    - "{{ karaf_features }}"
    - conf_files
    - flags:
      skip_missing: True
  register: karaf_features_configs_changed
  tags:
    - install-features

- include: "calculate-feature-diff.yml"
  tags:
    - install-features

- name: "Install features: Check clean cache needed on feature upgrade"
  debug:
    msg: 'Needs clean cache on feature install/upgrade "{{ item }}"'
  with_items: "{{ karaf_features }}"
  when: (karaf_features_to_upgrade.stdout is search(item.name)
            and item.karaf_clean_cache_on_upgrade is defined
            and item.karaf_clean_cache_on_upgrade == "yes")
            or karaf_clean_cache == "yes"
  changed_when: True
  notify: Karaf clean cache
  tags:
    - install-features

- name: "Force all notified handlers before feature installation"
  meta: flush_handlers
  tags:
    - install-features

- name: "Install features: Wait for Karaf ssh port"
  wait_for: "port={{ karaf_ssh_port }} timeout=30"
  tags:
    - install-features

- include: "calculate-feature-diff.yml"
  tags:
    - install-features

- name: "Install features: Add features repositories"
  become: yes
  shell: '{{ karaf_connect_to_local_Karaf_instance }} "feature:repo-add {% if item.url|d() %} {{ item.url }} {% else %} {{ item.repo }} {{ item.version|d() }} {% endif %}"'
  become_user: "{{ karaf_os_user_name }}"
  environment:
    JAVA_HOME: "{{ karaf_java_home }}"
  with_items: "{{ karaf_features }}"
  register: karaf_feature_add_repositories
  failed_when: karaf_feature_add_repositories.stdout is search("Error")
  when: item.url is defined or item.repo is defined
  changed_when: false
  tags:
    - install-features

- name: "Install feature: Check Karaf restart needed on feature upgrade"
  become: yes
  debug:
    msg: 'Needs Karaf restart on feature install/upgrade "{{ item }}"'
  with_items: "{{ karaf_features }}"
  when: (karaf_features_to_upgrade.stdout != ""
          and karaf_features_to_upgrade.stdout is search(item.name)
          and item.karaf_restart_on_upgrade is defined
          and item.karaf_restart_on_upgrade == "yes")
  register: karaf_restart_on_feature_upgrade_needed
  changed_when: True
  notify: Karaf restart
  tags:
    - install-features
#
#- name: "Install feature: Stop feature on feature install"
#  become: yes
#  shell: '{{ karaf_connect_to_local_Karaf_instance }} "feature:stop {{ item }}"'
#  become_user: "{{ karaf_os_user_name }}"
#  environment:
#    JAVA_HOME: "{{ karaf_java_home }}"
#  when: karaf_features_to_upgrade.stdout != "" and karaf_restart_on_feature_upgrade_needed is defined and karaf_restart_on_feature_upgrade_needed.changed
#  with_items: '{{ karaf_features_to_upgrade.stdout_lines }}'
#  tags:
#    - install-features

- name: "Install features: Perform installation"
  become: yes
  shell: '{{ karaf_connect_to_local_Karaf_instance }} "feature:install {{ "--no-auto-start --no-auto-refresh" if karaf_restart_on_feature_upgrade_needed.changed else "" }} --upgrade {{ full_features_install_list_with_versions }} ; log:display -n 6 -l INFO org.apache.karaf.features.internal"'
  become_user: "{{ karaf_os_user_name }}"
  register: karaf_feature_install
  changed_when: not karaf_feature_install.stdout is search("No deployment change")
  failed_when: karaf_feature_install.stdout is search("Error")
  when: full_features_install_list_with_versions != ""
  environment:
    JAVA_HOME: "{{ karaf_java_home }}"
  tags:
    - install-features

- name: "Pause for Install features"
  pause:
    seconds: '{{ karaf_pause_for_install_feature }}'
  when: karaf_feature_install.changed
  tags:
    - install-features

# TODO не перезапускать только что установленные или обновленные фичи
- name: "Install feature: Restart feature on config change"
  become: yes
  shell: '{{ karaf_connect_to_local_Karaf_instance }} "feature:restart {{ item.item[0].name  }}/{{ item.item[0].version }}"'
  become_user: "{{ karaf_os_user_name }}"
  environment:
    JAVA_HOME: "{{ karaf_java_home }}"
  when: (item.changed and item.item[0].karaf_on_config_change is defined and item.item[0].karaf_on_config_change == "feature")
  with_items: '{{ karaf_features_configs_changed.results }}'
  register: karaf_feature_restarted
  tags:
    - install-features

- name: "Install features: Check Karaf restart needed on feature config change"
  become: yes
  debug:
    msg: 'Needs Karaf restart on feature config change'
  when: (item.changed and item.item[0].karaf_on_config_change is defined and item.item[0].karaf_on_config_change == "karaf")
  with_items: '{{ karaf_features_configs_changed.results }}'
  changed_when: True
  notify: Karaf restart
  tags:
    - install-features

- name: "Force all notified handlers after feature installation"
  meta: flush_handlers
  tags:
    - install-features

- name: "Install features: Wait for Karaf ssh port"
  wait_for: "port={{ karaf_ssh_port }} timeout=30"
  tags:
    - install-features

- name: "Install feature: Start feature on feature install"
  become: yes
  shell: '{{ karaf_connect_to_local_Karaf_instance }} "feature:start {{ full_features_install_list_with_versions }}"'
  become_user: "{{ karaf_os_user_name }}"
  environment:
    JAVA_HOME: "{{ karaf_java_home }}"
  when: karaf_restart_on_feature_upgrade_needed.changed
  tags:
    - install-features

- name: "Install features: Check OSGI services is running"
  become: yes
  shell: '{{ karaf_connect_to_local_Karaf_instance }} "service:wait -e -t {{ karaf_timeout_to_wait_service }} {{ item.wait_service }}"'
  become_user: "{{ karaf_os_user_name }}"
  environment:
    JAVA_HOME: "{{ karaf_java_home }}"
  when: item.wait_service is defined and (karaf_feature_install.changed or karaf_feature_restarted.changed or karaf_features_configs_changed.changed)
  with_items: "{{ karaf_features }}"
  changed_when: false
  register: karaf_feature_wait_services
  failed_when: karaf_feature_wait_services.stdout is search("Error")
  tags:
    - install-features
