---

- name: "Configure logging in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ karaf_logging_properties }}"
  tags:
    - config

- name: "Configure logging rolling strategy in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    insertafter: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ karaf_logging_rolling_strategy }}"
  tags:
    - config

- name: "Create directory log4j2/log4j2-gelf/1.3.2"
  file:
    path: "{{ karaf_home }}/system/org/graylog2/log4j2/log4j2-gelf/1.3.2"
    state: directory
  when: karaf_log_gelf_enabled
  tags:
    - config

- name: "Upload Karaf gelf logging module"
  copy:
    src: "log4j2-gelf-1.3.2.jar"
    dest: "{{ karaf_home }}/system/org/graylog2/log4j2/log4j2-gelf/1.3.2/log4j2-gelf-1.3.2.jar"
  when: karaf_log_gelf_enabled
  tags:
    - config

# TODO Remove on close https://github.com/eclipse-ee4j/jaxb-api/issues/78
- name: "Upload jakarta patch"
  copy:
    src: "jakarta.xml.bind-api-2.3.2.CITC_1.jar"
    dest: "{{ karaf_home }}/lib/jdk9plus/jakarta.xml.bind-api-2.3.2.jar"
  tags:
    - config

- name: "Configure gelf logging in startup.properties"
  lineinfile:
    dest: "{{ karaf_home }}/etc/startup.properties"
    state: present
    regexp: '{{ item | replace("mvn\:", "") | regex_replace("/[0-9.]+\w+?\Z", "") }}.*$'
    line: '{{ item }} = 8'
  with_items:
    - mvn\:org.graylog2.log4j2/log4j2-gelf/1.3.2
  when: karaf_log_gelf_enabled
  notify: Karaf clean cache
  tags:
    - config

- name: "Add log4j2.status and log4j2.packages on gelf logging in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    insertbefore: BOF
    regexp: "log4j2.packages = org.graylog2.log4j2"
    line: "log4j2.packages = org.graylog2.log4j2"
  when: karaf_log_gelf_enabled and karaf_log_gelf_host != ''
  tags:
    - config

- name: "Configure gelf logging in org.ops4j.pax.logging.cfg"
  lineinfile:
    dest: "{{karaf_home }}/etc/org.ops4j.pax.logging.cfg"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ karaf_log_gelf_properties }}"
  when: karaf_log_gelf_enabled and karaf_log_gelf_host != ''
  tags:
    - config

- name: "Apply base configuration values"
  lineinfile:
    dest: "{{ karaf_home }}/etc/{{ item.0.file }}"
    state: present
    regexp: "^#?{{ item.1.prop }}.*$"
    line: "{{ item.1.prop }} = {{ item.1.value }}"
  with_subelements:
    - "{{ karaf_base_configuration }}"
    - params
  when: item.1.value is defined and item.1.value != '_UNDEFINED_'
  notify: Karaf restart
  tags:
    - config

- name: "Set custom configuration values"
  set_fact:
    karaf_custom_configuration: |
          {%- set items = [] -%}
          {%- for elem in (hostvars[inventory_hostname] | select('match', 'karaf_custom_configuration.*') | map('extract', hostvars[inventory_hostname]) | list) -%}
              {{ items.extend(elem) }}
          {%- endfor -%}
          {{ items | list }}
  tags:
    - config

- name: "Apply custom configuration values"
  lineinfile:
    dest: "{{ karaf_home }}/etc/{{ item.0.file }}"
    state: present
    regexp: "^#?{{ item.1.prop }}.*$"
    line: "{{ item.1.prop }} = {{ item.1.value }}"
    owner: "{{ karaf_os_user_name }}"
    group: "{{ karaf_os_user_name }}"
    mode: 0644
    create: yes
  with_subelements:
    - "{{ karaf_custom_configuration }}"
    - params
  when: item.1.value is defined and item.1.value != '_UNDEFINED_'
  #TODO: Условный перезапуск карафа karaf_restart_on_change
  tags:
    - config

- name: "Apply multiline custom configuration values"
  replace:
    dest: "{{ karaf_home }}/etc/{{ item.0.file }}"
    regexp: '^#?[ \t]*{{ item.1.prop }}([ \t\w\d:/@\.=,\-]+(\\\n\r?)?)+'
    replace: "{{ item.1.prop }} = {{ item.1.value }}"
  with_subelements:
    - "{{ karaf_multiline_custom_configuration }}"
    - params
  when: item.1.value is defined and item.1.value != '_UNDEFINED_'
  #TODO: Условный перезапуск карафа karaf_restart_on_change
  tags:
    - config

- name: 'Configure jre.properties'
  replace:
    dest: "{{ karaf_home }}/etc/jre.properties"
    regexp: '(#?[ \t]*jre-1.[\d\d])([ \t\w\d:/@\.=,\-]+)'
    replace: '\1={{ karaf_jre_properties }}, '
  when: karaf_jre_properties != ''
  notify: Karaf restart
  tags:
    - config

- name: 'Configure custom jre.properties'
  replace:
    dest: "{{ karaf_home }}/etc/jre.properties"
    regexp: '(.*javax.xml.validation).*([ \t\w\d:/@\.=,\-])'
    replace: ' {{ item.prop }};{{ item.value }}, '
  with_items: "{{ karaf_custom_jre_properties }}"
  when: item.value is defined and item.value != '_UNDEFINED_'
  notify: Karaf restart
  tags:
    - config

- name: 'Replace any line in jre.properties'
  replace:
    dest: "{{ karaf_home }}/etc/jre.properties"
    regexp: '(.*{{ item.prop }});.*([ \t\w\d:/@\.=,\-])'
    replace: '\1;{{ item.value }}, '
  with_items: "{{ karaf_replace_line_jre_properties }}"
  when: item.value is defined and item.value != '_UNDEFINED_'
  notify: Karaf restart
  tags:
    - config

- name: 'Configure custom jre.properties by version'
  lineinfile:
    dest: "{{ karaf_home }}/etc/jre.properties"
    insertafter: 'jre-1.{{ item.java_version }}.*'
    line: ' {{ item.prop }};{{ item.value }}, \'
    state: present
  with_items: "{{ karaf_custom_jre_properties_by_version }}"
  when: item.java_version is defined and item.java_version != '_UNDEFINED_' and item.value is defined and item.value != '_UNDEFINED_'
  notify: Karaf restart
  tags:
    - config

- name: 'Configure shell'
  lineinfile:
    dest: "{{ karaf_home }}/etc/shell.init.script"
    line: 'feature:restart = { feature:stop $args; feature:start $args; };'
  notify: Karaf restart
  tags:
    - config

- name: 'Configure org.apache.karaf.features.cfg'
  replace:
    dest: "{{ karaf_home }}/etc/org.apache.karaf.features.cfg"
    regexp: '(^#?[ \t]*featuresBoot =)([ \t\w\d:/@\.=,\-]+)'
    replace: '\1 {{ karaf_additional_boot_features }}, '
  when: karaf_additional_boot_features != ''
  notify: Karaf clean cache
  tags:
    - config

- name: "Set overrides configuration values"
  set_fact:
    karaf_overrides_entry: |
          {%- set items = [] -%}
          {%- set items1 = [] -%}
          {%- for elem in (hostvars[inventory_hostname] | select('match', 'karaf_features.*') | map('extract', hostvars[inventory_hostname])) -%}
              {{ items.extend(elem | selectattr('karaf_overrides_entry', 'defined') | map(attribute='karaf_overrides_entry')) }}
          {%- endfor -%}
          {%- for elem in (hostvars[inventory_hostname] | select('match', 'karaf_overrides_entry.*') | map('extract', hostvars[inventory_hostname])) -%}
              {{ items.extend(elem) }}
          {%- endfor -%}
          {{ items  | flatten | unique | sort }}
  tags:
    - config

- name: "Apply overrides configuration values"
  lineinfile:
    dest: "{{ karaf_home }}/etc/overrides.properties"
    state: present
    regexp: '{{ item | regex_search("^.*\/\d\d?.\d\d?.") }}'
    line: "{{ item }}"
    owner: "{{ karaf_os_user_name }}"
    group: "{{ karaf_os_user_name }}"
    mode: 0644
    create: yes
  with_items: "{{ karaf_overrides_entry }}"
  when: item is defined and item != ''
  notify: Karaf clean cache
  tags:
    - config
